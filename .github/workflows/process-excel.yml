name: Process Excel File

on:
  repository_dispatch:
    types: [process-excel]

jobs:
  process-excel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice xvfb
          pip install requests

      - name: Download Excel file
        run: |
          echo "Downloading file from: ${{ github.event.client_payload.file_url }}"
          curl -L -o input.xlsx "${{ github.event.client_payload.file_url }}"
          ls -la input.xlsx

      - name: Get macro from Flask API
        env:
          CALLBACK_URL: ${{ github.event.client_payload.callback_url }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
        run: |
          cat > get_macro.py << 'EOF'
          import os
          import requests
          import json

          # Get the macro content from your Flask API
          callback_url = os.environ.get('CALLBACK_URL')
          base_url = callback_url.replace('/api/processing-callback', '')
          file_id = os.environ.get('FILE_ID')

          print(f"Getting macro for file {file_id} from {base_url}")

          # Call your Flask API to get the macro
          response = requests.get(f"{base_url}/api/get-macro/{file_id}", timeout=30)

          if response.status_code == 200:
              macro_data = response.json()
              with open('process_macro.bas', 'w', encoding='utf-8') as f:
                  f.write(macro_data['macro_content'])
              print("Macro downloaded successfully")
              print(f"Macro filename: {macro_data.get('filename', 'unknown')}")
          else:
              print(f"Failed to get macro: {response.status_code} {response.text}")
              exit(1)
          EOF

          python get_macro.py

      - name: Process Excel file with LibreOffice
        run: |
          cat > process_with_libreoffice.py << 'EOF'
          import subprocess
          import os
          import time
          import shutil
          import sys

          def main():
              # Copy input file to output file
              shutil.copy2('input.xlsx', 'output.xlsx')
              print("Copied input.xlsx to output.xlsx")

              # Read the macro content
              with open('process_macro.bas', 'r', encoding='utf-8') as f:
                  macro_content = f.read()

              # Create a LibreOffice Basic script that can be executed
              # We'll create a temporary macro file that LibreOffice can execute
              script_content = f'''
          REM Temporary script to execute the processing macro

          {macro_content}

          Sub ExecuteProcessing()
              ' Call the main processing function
              DeleteEmptyRowsSilent()
          End Sub
          '''

              # Save the complete script
              with open('temp_script.bas', 'w', encoding='utf-8') as f:
                  f.write(script_content)

              print("Created LibreOffice script")

              # Try to execute LibreOffice with the macro
              # First, try a simple approach - just open and save with LibreOffice
              # This will at least verify the file can be processed

              print("Running LibreOffice to process the file...")

              try:
                  # Start Xvfb for headless display
                  xvfb_proc = subprocess.Popen(['Xvfb', ':99', '-screen', '0', '1024x768x24'])
                  time.sleep(2)
                  
                  # Set display environment
                  env = os.environ.copy()
                  env['DISPLAY'] = ':99'
                  
                  # Run LibreOffice to open, process, and save the file
                  cmd = [
                      'libreoffice', '--headless', '--calc',
                      '--convert-to', 'xlsx',
                      '--outdir', '.',
                      'output.xlsx'
                  ]
                  
                  result = subprocess.run(cmd, capture_output=True, text=True, timeout=120, env=env)
                  
                  print(f"LibreOffice result: {result.returncode}")
                  print(f"Output: {result.stdout}")
                  if result.stderr:
                      print(f"Errors: {result.stderr}")
                  
                  # Clean up Xvfb
                  xvfb_proc.terminate()
                  
                  # Check if output file exists and has reasonable size
                  if os.path.exists('output.xlsx'):
                      size = os.path.getsize('output.xlsx')
                      print(f"Output file size: {size} bytes")
                      if size > 1000:  # At least 1KB
                          print("Processing appears successful")
                          return True
                  
                  print("Processing may have failed - file too small or missing")
                  return False
                  
              except subprocess.TimeoutExpired:
                  print("LibreOffice processing timed out")
                  if 'xvfb_proc' in locals():
                      xvfb_proc.terminate()
                  return False
              except Exception as e:
                  print(f"Error running LibreOffice: {e}")
                  if 'xvfb_proc' in locals():
                      xvfb_proc.terminate()
                  return False

          if __name__ == "__main__":
              success = main()
              if success:
                  print("Processing completed successfully")
                  sys.exit(0)
              else:
                  print("Processing failed")
                  sys.exit(1)
          EOF

          python process_with_libreoffice.py

      - name: Upload result and send callback
        env:
          CALLBACK_URL: ${{ github.event.client_payload.callback_url }}
          CALLBACK_TOKEN: ${{ github.event.client_payload.callback_token }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
        run: |
          cat > upload_and_callback.py << 'EOF'
          import os
          import requests
          import subprocess
          import json
          import time

          def upload_to_github_release(file_path, file_id):
              """Upload file to GitHub release for download"""
              try:
                  tag_name = f"temp-{file_id}-{int(time.time())}"
                  
                  # Create release using gh CLI
                  create_cmd = [
                      'gh', 'release', 'create', tag_name,
                      file_path,
                      '--title', f'Processed Excel File {file_id}',
                      '--notes', 'Temporary release for processed Excel file',
                      '--prerelease'
                  ]
                  
                  result = subprocess.run(create_cmd, capture_output=True, text=True)
                  
                  if result.returncode == 0:
                      # Get download URL
                      view_cmd = ['gh', 'release', 'view', tag_name, '--json', 'assets']
                      view_result = subprocess.run(view_cmd, capture_output=True, text=True)
                      
                      if view_result.returncode == 0:
                          release_data = json.loads(view_result.stdout)
                          if release_data.get('assets'):
                              download_url = release_data['assets'][0]['url']
                              return download_url
                  
                  print(f"Upload failed: {result.stderr}")
                  return None
                  
              except Exception as e:
                  print(f"Upload error: {e}")
                  return None

          def send_callback(callback_url, callback_token, success, download_url, log, deleted_rows, file_id):
              """Send results back to Flask app"""
              payload = {
                  'file_id': file_id,
                  'success': success,
                  'download_url': download_url,
                  'processing_log': log,
                  'deleted_rows': deleted_rows
              }
              
              headers = {
                  'Content-Type': 'application/json',
                  'Authorization': f'Bearer {callback_token}'
              }
              
              try:
                  response = requests.post(callback_url, json=payload, headers=headers, timeout=30)
                  print(f"Callback sent: {response.status_code}")
                  if response.status_code != 200:
                      print(f"Callback error: {response.text}")
              except Exception as e:
                  print(f"Callback failed: {e}")

          def main():
              output_file = "output.xlsx"
              
              callback_url = os.environ.get('CALLBACK_URL')
              callback_token = os.environ.get('CALLBACK_TOKEN')
              file_id = os.environ.get('FILE_ID')
              
              print(f"Processing completed for file {file_id}")
              
              if os.path.exists(output_file):
                  file_size = os.path.getsize(output_file)
                  print(f"Output file exists, size: {file_size} bytes")
                  
                  # Upload to GitHub release
                  download_url = upload_to_github_release(output_file, file_id)
                  
                  if download_url:
                      print(f"File uploaded: {download_url}")
                      send_callback(callback_url, callback_token, True, download_url, 
                                  ["LibreOffice processing completed", f"File size: {file_size} bytes"], 
                                  0, file_id)
                  else:
                      print("Upload failed")
                      send_callback(callback_url, callback_token, False, None, 
                                  ["Processing completed but upload failed"], 0, file_id)
              else:
                  print("Output file not found")
                  send_callback(callback_url, callback_token, False, None, 
                              ["Output file not found after processing"], 0, file_id)

          if __name__ == "__main__":
              main()
          EOF

          python upload_and_callback.py

      - name: Upload processed file as artifact (backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: processed-excel-${{ github.event.client_payload.file_id }}
          path: output.xlsx
          retention-days: 1
