name: Process Excel File

on:
  repository_dispatch:
    types: [process-excel]

jobs:
  process:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install LibreOffice
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice python3-uno

      - name: Download input file
        run: |
          curl -L "${{ github.event.client_payload.file_url }}" -o input.xlsx
          ls -la input.xlsx

      - name: Start LibreOffice headless
        run: |
          libreoffice --headless --invisible --nocrashreport --nodefault --nofirststartwizard --nologo --norestore --accept="socket,host=localhost,port=2002;urp;" &
          sleep 10

      - name: Process Excel file with UNO
        run: |
          cat > process_uno.py << 'EOF'
          import uno
          import os
          import sys

          def main():
              try:
                  print("UNO script starting...")
                  
                  # Connect to LibreOffice
                  localContext = uno.getComponentContext()
                  resolver = localContext.ServiceManager.createInstanceWithContext(
                      "com.sun.star.bridge.UnoUrlResolver", localContext)
                  
                  print("Connecting to LibreOffice UNO server...")
                  context = resolver.resolve("uno:socket,host=localhost,port=2002;urp;StarOffice.ComponentContext")
                  desktop = context.ServiceManager.createInstanceWithContext(
                      "com.sun.star.frame.Desktop", context)
                  
                  print("Connected to LibreOffice UNO server")
                  
                  # Load document
                  input_path = os.path.abspath("input.xlsx")
                  file_url = uno.systemPathToFileUrl(input_path)
                  print(f"Loading document: {file_url}")
                  
                  doc = desktop.loadComponentFromURL(file_url, "_blank", 0, ())
                  print("Document loaded")
                  
                  # Process directly with UNO API
                  deleted_rows = delete_empty_rows_direct(doc)
                  print(f"Deleted {deleted_rows} empty rows")
                  
                  # Save the result
                  output_path = os.path.abspath("output.xlsx")
                  output_url = uno.systemPathToFileUrl(output_path)
                  print(f"Output URL: {output_url}")
                  
                  doc.storeAsURL(output_url, ())
                  doc.close(True)
                  
                  print(f"Processing complete. Deleted {deleted_rows} rows.")
                  return 0
                  
              except Exception as e:
                  print(f"Error: {e}")
                  import traceback
                  traceback.print_exc()
                  return 1

          def delete_empty_rows_direct(doc):
              """Delete rows directly using UNO API"""
              # Force all formulas to be calculated
              doc.calculateAll()
             
              # Wait for calculation to complete
              import time
              time.sleep(1)
              deleted_count = 0
              
              try:
                  sheets = doc.getSheets()
                  print(f"Processing {sheets.getCount()} sheets")
                  
                  # Process all sheets
                  for sheet_idx in range(sheets.getCount()):
                      sheet = sheets.getByIndex(sheet_idx)
                      sheet_name = sheet.getName()
                      print(f"Processing sheet: {sheet_name}")
                      
                      # Get the used range to find last row
                      cursor = sheet.createCursor()
                      cursor.gotoEndOfUsedArea(False)
                      last_row = cursor.getPosition().Row + 1
                      print(f"Last row in {sheet_name}: {last_row}")
                      
                      # Check rows from bottom to top
                      rows_to_delete = []
                      
                      for row in range(last_row - 1, -1, -1):
                          all_empty = True
                          
                          # Check columns F, G, H, I (indices 5, 6, 7, 8)
                          for col in [5, 6, 7, 8]:
                              try:
                                  cell = sheet.getCellByPosition(col, row)
                                  
                                  # Check both value and string content
                                  cell_value = cell.getValue()
                                  cell_string = cell.getString().strip()
                                  
                                  if cell_value != 0 or cell_string != "":
                                      all_empty = False
                                      break
                              except Exception as e:
                                  print(f"Error checking cell ({col}, {row}): {e}")
                                  all_empty = False
                                  break
                          
                          if all_empty:
                              rows_to_delete.append(row)
                      
                      print(f"Found {len(rows_to_delete)} empty rows to delete in {sheet_name}")
                      
                      # Delete rows (already in reverse order)
                      for row in rows_to_delete:
                          try:
                              sheet.getRows().removeByIndex(row, 1)
                              deleted_count += 1
                              if deleted_count % 10 == 0:
                                  print(f"Deleted {deleted_count} rows so far...")
                          except Exception as e:
                              print(f"Error deleting row {row}: {e}")
                              
              except Exception as e:
                  print(f"Error in delete_empty_rows_direct: {e}")
                  import traceback
                  traceback.print_exc()
              
              return deleted_count

          if __name__ == "__main__":
              exit_code = main()
              print(f"UNO exit: {exit_code}")
              sys.exit(exit_code)
          EOF

          python3 process_uno.py

      - name: Upload processed file
        uses: actions/upload-artifact@v4
        with:
          name: processed-excel
          path: output.xlsx
          retention-days: 30

      - name: Show file info
        run: |
          if [ -f "output.xlsx" ]; then
            echo "✅ Processing successful"
            echo "Output file size: $(stat -c%s output.xlsx) bytes"
            echo "============================================================"
          else
            echo "✗ Processing failed"
            echo "============================================================"
            exit 1
          fi
